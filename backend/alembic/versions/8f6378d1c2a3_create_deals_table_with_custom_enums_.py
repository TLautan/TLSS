"""Create deals table with custom enums and relationships

Revision ID: 8f6378d1c2a3
Revises: 6fe9c012bdc8
Create Date: 2025-06-25 07:29:03.129866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f6378d1c2a3'
down_revision: Union[str, Sequence[str], None] = '6fe9c012bdc8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # ====================================================================
    # >>> CRUCIAL FIX: Create NEW ENUM types FIRST <<<
    # ====================================================================
    # Ensure these names exactly match your Python model's Enum 'name' argument
    # And the values match your Python Enum's values
    op.execute("CREATE TYPE deal_status AS ENUM ('進行中', '受注', '失注', 'キャンセル')")
    op.execute("CREATE TYPE deal_type AS ENUM ('direct', 'agency')")
    # ====================================================================

    # Add new columns
    op.add_column('deals', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('deals', sa.Column('updated_at', sa.DateTime(timezone=True), onupdate=sa.text('now()'), server_default=sa.text('now()'), nullable=False))

    # Alter existing columns - value, title, user_id, company_id, lead_generated_at, closed_at, reasons
    # These typically come before ENUM changes if the ENUMs replace VARCHARs
    op.alter_column('deals', 'title', existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column('deals', 'value', existing_type=sa.DOUBLE_PRECISION(precision=53), type_=sa.Numeric(precision=15, scale=2), nullable=False)
    op.alter_column('deals', 'user_id', existing_type=sa.INTEGER(), nullable=False)
    op.alter_column('deals', 'company_id', existing_type=sa.INTEGER(), nullable=False)
    op.alter_column('deals', 'lead_generated_at', existing_type=postgresql.TIMESTAMP(), type_=sa.DateTime(timezone=True), existing_nullable=True)
    op.alter_column('deals', 'closed_at', existing_type=postgresql.TIMESTAMP(), type_=sa.DateTime(timezone=True), existing_nullable=True)
    op.alter_column('deals', 'win_reason', existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=True)
    op.alter_column('deals', 'loss_reason', existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=True)
    op.alter_column('deals', 'cancellation_reason', existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=True)
    op.drop_index(op.f('ix_deals_title'), table_name='deals')


    # =======================================================================================
    # >>> FIX FOR ENUM TYPE ALTERATIONS <<<
    # This involves a common pattern for changing ENUMs or VARCHAR to ENUMs correctly.
    # =======================================================================================

    # Step 4.1: Convert existing 'status' column data to TEXT first (if it's not already)
    # This is a safe intermediate step before casting to the *new* ENUM type.
    op.alter_column(
        'deals', 'status',
        existing_type=postgresql.ENUM('in_progress', 'won', 'lost', 'cancelled', name='dealstatus'), # Original ENUM name
        type_=sa.Text(), # Cast to TEXT first
        existing_nullable=False,
        postgresql_using="status::text" # Cast existing data to text
    )
    # Step 4.2: Now alter the 'status' column to the new ENUM type
    op.alter_column(
        'deals', 'status',
        existing_type=sa.Text(), # Now the existing type is Text
        type_=postgresql.ENUM('進行中', '受注', '失注', 'キャンセル', name='deal_status'), # The NEW ENUM type
        existing_nullable=False,
        postgresql_using="status::deal_status" # Cast text values to the new ENUM
    )


    # Step 5.1: Convert existing 'type' column data to TEXT first
    op.alter_column(
        'deals', 'type',
        existing_type=postgresql.ENUM('direct', 'agency', name='dealtype'), # Original ENUM name
        type_=sa.Text(), # Cast to TEXT first
        existing_nullable=False,
        postgresql_using="type::text" # Cast existing data to text
    )
    # Step 5.2: Now alter the 'type' column to the new ENUM type
    op.alter_column(
        'deals', 'type',
        existing_type=sa.Text(), # Now the existing type is Text
        type_=postgresql.ENUM('direct', 'agency', name='deal_type'), # The NEW ENUM type
        existing_nullable=False,
        postgresql_using="type::deal_type" # Cast text values to the new ENUM
    )
    # =======================================================================================

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # =======================================================================================
    # >>> FIX FOR ENUM TYPE ALTERATIONS IN DOWNGRADE <<<
    # Reverse the order of operations from upgrade
    # =======================================================================================

    # 1. Reverse type alterations for status and type
    # Downgrade 'status': from new ENUM to original ENUM (or VARCHAR if it was VARCHAR)
    op.alter_column('deals', 'status',
                   existing_type=postgresql.ENUM('進行中', '受注', '失注', 'キャンセル', name='deal_status'), # Existing is the new type now
                   type_=postgresql.ENUM('in_progress', 'won', 'lost', 'cancelled', name='dealstatus'), # Change back to original
                   existing_nullable=False,
                   postgresql_using="status::dealstatus") # Cast back

    op.alter_column('deals', 'type',
                   existing_type=postgresql.ENUM('direct', 'agency', name='deal_type'), # Existing is the new type now
                   type_=postgresql.ENUM('direct', 'agency', name='dealtype'), # Change back to original
                   existing_nullable=False,
                   postgresql_using="type::dealtype") # Cast back
    
    # 2. Reverse other column alterations (order matters)
    op.create_index(op.f('ix_deals_title'), 'deals', ['title'], unique=False)
    op.alter_column('deals', 'cancellation_reason', existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=True)
    op.alter_column('deals', 'loss_reason', existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=True)
    op.alter_column('deals', 'win_reason', existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=True)
    op.alter_column('deals', 'closed_at', existing_type=sa.DateTime(timezone=True), type_=postgresql.TIMESTAMP(), existing_nullable=True)
    op.alter_column('deals', 'lead_generated_at', existing_type=sa.DateTime(timezone=True), type_=postgresql.TIMESTAMP(), existing_nullable=True)
    op.alter_column('deals', 'company_id', existing_type=sa.INTEGER(), nullable=True) # Revert nullable
    op.alter_column('deals', 'user_id', existing_type=sa.INTEGER(), nullable=True)   # Revert nullable
    op.alter_column('deals', 'value', existing_type=sa.Numeric(precision=15, scale=2), type_=sa.DOUBLE_PRECISION(precision=53), nullable=True)
    op.alter_column('deals', 'title', existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column('deals', 'updated_at')
    op.drop_column('deals', 'created_at')

    # 3. Drop the ENUM types LAST in downgrade
    op.execute("DROP TYPE deal_status")
    op.execute("DROP TYPE deal_type")

    # ### end Alembic commands ###