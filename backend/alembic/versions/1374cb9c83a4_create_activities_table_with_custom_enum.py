"""Create activities table with custom enum

Revision ID: 1374cb9c83a4
Revises: 8f6378d1c2a3
Create Date: 2025-06-25 08:27:02.762936

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1374cb9c83a4'
down_revision: Union[str, Sequence[str], None] = '8f6378d1c2a3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # ====================================================================
    # >>> CRUCIAL FIX: Create ENUM type FIRST <<<
    # ====================================================================
    # This SQL command MUST be executed before any column uses the type
    op.execute("CREATE TYPE activity_type AS ENUM ('電話', 'メール', '会議')")
    # ====================================================================

    # Now, proceed with the column additions (these typically come first)
    op.add_column('activities', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('activities', sa.Column('updated_at', sa.DateTime(timezone=True), onupdate=sa.text('now()'), server_default=sa.text('now()'), nullable=False))


    # Alter existing columns - deal_id, date, notes
    op.alter_column('activities', 'deal_id', existing_type=sa.INTEGER(), nullable=False)
    op.alter_column('activities', 'date', existing_type=postgresql.TIMESTAMP(), type_=sa.DateTime(timezone=True), existing_nullable=True)
    op.alter_column('activities', 'notes', existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=True) # Assuming VARCHAR was previous type


    # Alter 'type' column to use the new ENUM type
    # This is where the problematic part was, trying to cast to a non-existent type.
    op.alter_column('activities', 'type',
               existing_type=sa.VARCHAR(), # Assuming 'type' was VARCHAR before
               type_=postgresql.ENUM('電話', 'メール', '会議', name='activity_type'),
               nullable=False, # From your model's nullable=False
               postgresql_using="type::activity_type") # Crucial cast for existing data


    # Note: The `alter_column` calls for 'deals.created_at' and 'deals.updated_at'
    # are a bit unusual to see in this migration. They usually belong to the 'deals' migration.
    # If these were autogenerated, they reflect changes Alembic detected.
    # Ensure 'nullable=False' if that's the intent, as I put in the Python model.
    op.alter_column('deals', 'created_at',
                   existing_type=postgresql.TIMESTAMP(timezone=True),
                   nullable=False, # Changed to false as per model
                   existing_server_default=sa.text('now()'))
    op.alter_column('deals', 'updated_at',
                   existing_type=postgresql.TIMESTAMP(timezone=True),
                   nullable=False, # Changed to false as per model
                   existing_server_default=sa.text('now()'))

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Reverse the `deals` column alterations first (if they were part of this migration)
    op.alter_column('deals', 'updated_at',
                   existing_type=postgresql.TIMESTAMP(timezone=True),
                   nullable=True, # Revert nullable
                   existing_server_default=sa.text('now()'))
    op.alter_column('deals', 'created_at',
                   existing_type=postgresql.TIMESTAMP(timezone=True),
                   nullable=True, # Revert nullable
                   existing_server_default=sa.text('now()'))

    # Reverse other column alterations for 'activities'
    op.alter_column('activities', 'notes', existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=True)
    op.alter_column('activities', 'date', existing_type=sa.DateTime(timezone=True), type_=postgresql.TIMESTAMP(), existing_nullable=True)
    op.alter_column('activities', 'deal_id', existing_type=sa.INTEGER(), nullable=True) # Revert nullable

    # Reverse 'type' column type change (from new ENUM back to VARCHAR)
    op.alter_column('activities', 'type',
               existing_type=postgresql.ENUM('電話', 'メール', '会議', name='activity_type'), # Existing is the new type now
               type_=sa.VARCHAR(), # Change back to original VARCHAR (or old ENUM if applicable)
               nullable=True) # Revert nullable if it was True before

    op.drop_column('activities', 'updated_at')
    op.drop_column('activities', 'created_at')

    # >>> CRUCIAL FIX: Drop ENUM type LAST in downgrade <<<
    op.execute("DROP TYPE activity_type")

    # ### end Alembic commands ###
